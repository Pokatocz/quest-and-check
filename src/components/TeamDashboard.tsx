import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Users, Plus, Copy, Check } from "lucide-react";
import { toast } from "sonner";

export const TeamDashboard = ({ onTeamSelect }: { onTeamSelect: (teamId: string) => void }) => {
  const { profile, user } = useAuth();
  const [teams, setTeams] = useState<any[]>([]);
  const [teamName, setTeamName] = useState("");
  const [joinCode, setJoinCode] = useState("");
  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState<string | null>(null);

  useEffect(() => {
    if (user) {
      fetchTeams();
    }
  }, [user]);

  const fetchTeams = async () => {
    try {
      if (profile?.role === "employer") {
        const { data, error } = await supabase
          .from("teams")
          .select("*")
          .eq("owner_id", user?.id);
        
        if (error) throw error;
        setTeams(data || []);
      } else {
        // First get team member records
        const { data: memberships, error: memberError } = await supabase
          .from("team_members")
          .select("team_id")
          .eq("user_id", user?.id);
        
        if (memberError) {
          console.error("Error fetching memberships:", memberError);
          throw memberError;
        }

        if (!memberships || memberships.length === 0) {
          setTeams([]);
          return;
        }

        // Then get the actual team data
        const teamIds = memberships.map(m => m.team_id);
        const { data: teamsData, error: teamsError } = await supabase
          .from("teams")
          .select("*")
          .in("id", teamIds);
        
        if (teamsError) {
          console.error("Error fetching teams:", teamsError);
          throw teamsError;
        }
        
        setTeams(teamsData || []);
      }
    } catch (error) {
      console.error("Error fetching teams:", error);
    }
  };

  const createTeam = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!teamName.trim()) return;

    setLoading(true);
    try {
      const { error } = await supabase
        .from("teams")
        .insert({
          name: teamName,
          owner_id: user?.id,
          join_code: '', // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (error) throw error;

      toast.success("Tým vytvořen!");
      setTeamName("");
      fetchTeams();
    } catch (error: any) {
      toast.error(error.message);
    } finally {
      setLoading(false);
    }
  };

  const joinTeam = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!joinCode.trim()) return;

    setLoading(true);
    try {
      const { data, error } = await supabase.rpc('join_team_by_code', {
        _join_code: joinCode.toUpperCase()
      });

      const result = data as { success: boolean; message: string } | null;

      if (error || !result?.success) {
        throw new Error(result?.message || "Nepodařilo se připojit k týmu");
      }

      toast.success("Úspěšně jste se připojili k týmu!");
      setJoinCode("");
      fetchTeams();
    } catch (error: any) {
      toast.error(error.message);
    } finally {
      setLoading(false);
    }
  };

  const copyJoinCode = (code: string) => {
    navigator.clipboard.writeText(code);
    setCopied(code);
    toast.success("Kód zkopírován!");
    setTimeout(() => setCopied(null), 2000);
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold mb-2">Vaše týmy</h2>
        <p className="text-muted-foreground">
          {profile?.role === "employer"
            ? "Vytvořte tým a sdílejte kód s vašimi zaměstnanci"
            : "Připojte se k týmu pomocí kódu od zaměstnavatele"}
        </p>
      </div>

      {profile?.role === "employer" ? (
        <Card className="p-6">
          <form onSubmit={createTeam} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="teamName">Název týmu</Label>
              <Input
                id="teamName"
                value={teamName}
                onChange={(e) => setTeamName(e.target.value)}
                placeholder="Můj úžasný tým"
                required
              />
            </div>
            <Button type="submit" disabled={loading} className="w-full gradient-primary">
              <Plus className="w-4 h-4 mr-2" />
              Vytvořit tým
            </Button>
          </form>
        </Card>
      ) : (
        <Card className="p-6">
          <form onSubmit={joinTeam} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="joinCode">Kód týmu</Label>
              <Input
                id="joinCode"
                value={joinCode}
                onChange={(e) => setJoinCode(e.target.value)}
                placeholder="ABC123"
                required
                maxLength={6}
                className="uppercase"
              />
            </div>
            <Button type="submit" disabled={loading} className="w-full gradient-primary">
              <Users className="w-4 h-4 mr-2" />
              Připojit se k týmu
            </Button>
          </form>
        </Card>
      )}

      <div className="grid gap-4">
        {teams.map((team) => (
          <Card
            key={team.id}
            className="p-6 cursor-pointer transition-smooth hover:shadow-glow"
            onClick={() => onTeamSelect(team.id)}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-full gradient-primary flex items-center justify-center">
                  <Users className="w-5 h-5 text-primary-foreground" />
                </div>
                <div>
                  <h3 className="font-semibold">{team.name}</h3>
                  {profile?.role === "employer" && (
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant="secondary" className="text-xs">
                        {team.join_code}
                      </Badge>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          copyJoinCode(team.join_code);
                        }}
                        className="text-muted-foreground hover:text-foreground transition-smooth"
                      >
                        {copied === team.join_code ? (
                          <Check className="w-3 h-3" />
                        ) : (
                          <Copy className="w-3 h-3" />
                        )}
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </Card>
        ))}

        {teams.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            {profile?.role === "employer"
              ? "Zatím nemáte žádný tým. Vytvořte první!"
              : "Nejste členem žádného týmu. Připojte se pomocí kódu!"}
          </div>
        )}
      </div>
    </div>
  );
};
